name: Build & Push Docker Image

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: hubx-api
  DOCKERFILE_PATH: ./Dockerfile
  CONTEXT: .
  # --- EC2 deploy ayarları ---
  REMOTE_DIR: /srv/hubx         # EC2’da docker-compose.yml'nin bulunduğu klasör
  SSH_HOST: ${{ secrets.EC2_HOST }}
  SSH_USER: ${{ secrets.EC2_USER }} # örn: ubuntu veya ec2-user

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (latest)
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH | Pull & Restart with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}   # PEM içeriğini Secret olarak yapıştır
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script_stop: true
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,REMOTE_DIR,IMAGE_NAME
          script: |
            set -euo pipefail
            cd "${REMOTE_DIR}"

            # (Opsiyonel) image private ise login ol
            if [ -n "${DOCKERHUB_USERNAME:-}" ] && [ -n "${DOCKERHUB_TOKEN:-}" ]; then
              echo "Login to Docker Hub on EC2..."
              echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            fi

            echo "Pull latest image(s)..."
            docker compose pull

            echo "Recreate containers..."
            docker compose up -d --remove-orphans

            echo "Prune dangling images..."
            docker image prune -f

            echo "Deployment done."
